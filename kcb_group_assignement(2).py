# -*- coding: utf-8 -*-
"""KCB_Group_Assignement(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJIO4U2Np3aPO9yLZMZwlzlAxL3P4dXz

## Introduction
### KCB Group assignment
#### Group Members

1. Esther Ndunge Muinde
2. Wayne Otieno
3. Faith Jeptoo
4. Doreen Tenai
5. Ali Mtulu Funda

This dataset contains the Jobs and Salaries in Datascience
The aim of this assignment is to evaluate our understanding on the concepts taught so far.

Upload and Mount Google Drive content
"""

from google.colab import drive
drive.mount('/content/drive')

# Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""1. Load the dataset to Colab and list the first ten and last ten records on the dataset."""

df_jobs = pd.read_csv('/content/drive/My Drive/jobs_in_data.csv')

# Last 10 jobs
df_jobs.tail(10)

# First 10 jobs
df_jobs.head(10)

"""2. Check the total number of entries in the database, and then identify if there are any missing values in the dataset. If so, drop the records containing missing values"""

# Check the total number of entries
total_entries = len(df_jobs)
print(f"Total entries: {total_entries}")

# Check for missing values in the dataset
missing_values = df_jobs.isnull().sum()
print(f"Missing values:\n{missing_values}")

# Drop records containing missing values
df_jobs.dropna(inplace=True)

# Verify that there are no more missing values
missing_values = df_jobs.isnull().sum()
print(f"Missing values after dropping:\n{missing_values}")

df_jobs.info()

"""#### Dataset Overview

The Dataset consists of 9355 entries and 12 columns
It includes information on various aspects related to job positions and employment
There are no missing values in any of the columns
"""

df_jobs.describe()

"""#### Summary

* The dataset predominantly consists of data from the year 2023 with a few entries from 2020. There is little variability in the distribution of work years

* The average salary across all jobs is approximately 149, 928 with a standard deviation of 63,609 indicating significant variability in salaries
Overall there is notable variability in the salary amounts

4. Create a pie chart showing the most common job titles in the dataset. Create a new
dataframe by filtering the current one using the “Data Scientist” Job title. Save and
export this dataframe as CSV. We will be working with this dataframe going forward
"""

# Get the top 5 most common job titles
top_5_job_titles = df_jobs['job_title'].value_counts().head(5)

# Create a pie chart
plt.figure(figsize=(10, 7))
plt.pie(top_5_job_titles, labels=top_5_job_titles.index, autopct='%1.1f%%')
plt.title('Most Common Job Titles')
plt.show()

"""Create a new
dataframe by filtering the current one using the “Data Scientist” Job title. Save and
export this dataframe as CSV. We will be working with this dataframe going forward.
"""

#Filter the dataframe to contain Data scientist job title
# Save it to csv

df_ds = df_jobs[df_jobs['job_title'] == 'Data Scientist']
df_ds.to_csv('data_scientist_jobs.csv', index=False)

df_ds.head()

"""5. Analyse salary by experience level. Calculate the total, min, max and average salaries
for each experience level (Entry-level, Mid-level, Senior, etc.) and visualise the
differences
"""

salary_exp = df_ds.groupby('experience_level')['salary_in_usd'].agg(['sum', 'min', 'max', 'mean'])
salary_exp

salary_exp_df = pd.DataFrame(salary_exp)
salary_exp_df

# Visualize the salary differences
salary_exp_df[['min', 'max', 'mean']].plot(kind='bar', figsize=(10,6))
plt.title('Salary by Experience Level')
plt.xlabel('Experience Level')
plt.ylabel('Salary (USD)')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.legend(['Minimum', 'Maximum', 'Mean'])
plt.show()

"""6. Only focusing on the United Kingdom, Compare salaries for full-time, part-time, and
contract employees and identify any trends
"""

df_ds.shape

# Filter the DataFrame for employees residing in the United Kingdom
uk_df = df_ds[df_ds['employee_residence'] == 'United Kingdom']

# Group the filtered DataFrame by employment_type and calculate summary statistics for salary
salary_by_employment_type = uk_df.groupby('employment_type')['salary_in_usd'].describe()

# Visualize the salary differences
salary_by_employment_type[['mean', '25%', '50%', '75%']].plot(kind='bar', figsize=(10,6))
plt.title('Salary by Employment Type in the United Kingdom')
plt.xlabel('Employment Type')
plt.ylabel('Salary (USD)')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.legend(['Mean', '25th Percentile', 'Median', '75th Percentile'])
plt.show()

uk_df

salary_by_employment_type

"""Most Data Scientist  in the UK are full time working on and average salary of 108,949 USD"""

